@model IEnumerable<CMLSmartHomeController.Model.SensorRecord>

@{
    ViewData["Title"] = "SensorRecords";
}

@{
    var XLabels = Newtonsoft.Json.JsonConvert.SerializeObject(Model
                    .Where(t => t.Unit == CMLSmartHomeCommon.Enums.UnitType.CelsiusDegree)
                    .Select(x => x.DateTime).ToList());
    var YValues = Newtonsoft.Json.JsonConvert.SerializeObject(Model
                    .Where(t => t.Unit == CMLSmartHomeCommon.Enums.UnitType.CelsiusDegree)
                    .Select(x => x.Value).ToList());
    ViewData["Title"] = "Line Chart";
}

<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Line</title>
</head>
<body>
    <div class="box-body">

        <div class="chart-container">
            <canvas id="chart" style="width:100%; height:500px"></canvas>
        </div>
    </div>
</body>
</html>

<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.2/Chart.bundle.min.js"></script>
<script src="https://code.jquery.com/jquery-3.3.1.min.js"></script>

<script type="text/javascript">

        $(function () {
            var chartName = "chart";
            var ctx = document.getElementById(chartName).getContext('2d');
            var data = {
                    labels: @Html.Raw(XLabels),
                    datasets: [{
                        label: "Countries Chart",
                        backgroundColor: [
                            'rgba(255, 99, 132, 0.2)',
                            'rgba(54, 162, 235, 0.2)',
                            'rgba(255, 206, 86, 0.2)',
                            'rgba(75, 192, 192, 0.2)',
                            'rgba(153, 102, 255, 0.2)',
                            'rgba(255, 159, 64, 0.2)',
                            'rgba(255, 0, 0)',
                            'rgba(0, 255, 0)',
                            'rgba(0, 0, 255)',
                            'rgba(192, 192, 192)',
                            'rgba(255, 255, 0)',
                            'rgba(255, 0, 255)'
                        ],
                        borderColor: [
                            'rgba(255,99,132,1)',
                            'rgba(54, 162, 235, 1)',
                            'rgba(255, 206, 86, 1)',
                            'rgba(75, 192, 192, 1)',
                            'rgba(153, 102, 255, 1)',
                            'rgba(255, 159, 64, 1)',
                            'rgba(255, 0, 0)',
                            'rgba(0, 255, 0)',
                            'rgba(0, 0, 255)',
                            'rgba(192, 192, 192)',
                            'rgba(255, 255, 0)',
                            'rgba(255, 0, 255)'
                        ],
                        borderWidth: 1,
                        data: @Html.Raw(YValues)
                    }]
            };

            var options = {
                maintainAspectRatio: false,
                scales: {
                    yAxes: [{
                        ticks: {
                            min: 15,
                            beginAtZero: false
                        },
                        gridLines: {
                            display: true,
                            color: "rgba(255,99,164,0.2)"
                        }
                    }],
                    xAxes: [{
                        ticks: {
                            min: 0,
                            beginAtZero: true
                        },
                        gridLines: {
                            display: false
                        }
                    }]
                }
            };

            var myChart = new  Chart(ctx, {
                options: options,
                data: data,
                type:'line'

            });
        });
</script>

<h2>Sensor Records</h2>

<table class="table">
    <thead>
        <tr>
            <th>
                @Html.ActionLink("Record ID", "Index", new { sortOrder = ViewBag.IDSortParm })
            </th>
            <th>
                @Html.ActionLink("Collector ID", "Index", new { sortOrder = ViewBag.CollectorIDSortParm })
            </th>
            <th>
                @Html.ActionLink("Senzor ID", "Index", new { sortOrder = ViewBag.SensorIDSortParm })
            </th>
            <th>
                @Html.ActionLink("Value", "Index", new { sortOrder = ViewBag.ValueSortParm })
            </th>
            <th>
                @Html.ActionLink("Unit", "Index", new { sortOrder = ViewBag.UnitSortParm })
            </th>
            <th>
                @Html.ActionLink("DateTime", "Index", new { sortOrder = ViewBag.DateSortParm })
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Id)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CollectorId)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.SensorId)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Value)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Unit)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.DateTime)
                </td>
                <td>
                    <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                    <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>