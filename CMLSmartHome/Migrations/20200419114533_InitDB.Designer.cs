// <auto-generated />
using System;
using CMLSmartHomeController.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CMLSmartHomeController.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200419114533_InitDB")]
    partial class InitDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CMLSmartHomeCommon.Model.Collector", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("MACAddress")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("SmartHomeControllerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SmartHomeControllerId");

                    b.ToTable("Collectors");
                });

            modelBuilder.Entity("CMLSmartHomeCommon.Model.Dashboard", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("OutdoorCollectorId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OutdoorCollectorId");

                    b.ToTable("Dashboard");
                });

            modelBuilder.Entity("CMLSmartHomeCommon.Model.Sensor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("CollectorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("Unit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CollectorId");

                    b.ToTable("Sensors");
                });

            modelBuilder.Entity("CMLSmartHomeCommon.Model.WeatherForecast", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("WeatherForecast");
                });

            modelBuilder.Entity("CMLSmartHomeCommon.Model.WeatherForecast+CurrentState", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<double>("AtmosphericTemperature")
                        .HasColumnType("double");

                    b.Property<int>("AverageVisibility")
                        .HasColumnType("int");

                    b.Property<int>("Cloudiness")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("FeelsLikeTemperature")
                        .HasColumnType("double");

                    b.Property<int>("Humidity")
                        .HasColumnType("int");

                    b.Property<int>("Pressure")
                        .HasColumnType("int");

                    b.Property<double?>("Rain")
                        .HasColumnType("double");

                    b.Property<double?>("Snow")
                        .HasColumnType("double");

                    b.Property<DateTime>("SunriseTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("SunsetTime")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("Temperature")
                        .HasColumnType("double");

                    b.Property<double>("UVIndex")
                        .HasColumnType("double");

                    b.Property<long>("WeatherForecastId")
                        .HasColumnType("bigint");

                    b.Property<int>("WindDirection")
                        .HasColumnType("int");

                    b.Property<double>("WindSpeed")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("WeatherForecastId")
                        .IsUnique();

                    b.ToTable("WeatherForecastCurrentState");
                });

            modelBuilder.Entity("CMLSmartHomeCommon.Model.WeatherForecast+DailyState", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<double>("AtmosphericTemperature")
                        .HasColumnType("double");

                    b.Property<int>("AverageVisibility")
                        .HasColumnType("int");

                    b.Property<int>("Cloudiness")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Humidity")
                        .HasColumnType("int");

                    b.Property<int>("Pressure")
                        .HasColumnType("int");

                    b.Property<double>("Rain")
                        .HasColumnType("double");

                    b.Property<double>("Snow")
                        .HasColumnType("double");

                    b.Property<DateTime>("SunriseTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("SunsetTime")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("UVIndex")
                        .HasColumnType("double");

                    b.Property<long>("WeatherForecastId")
                        .HasColumnType("bigint");

                    b.Property<int>("WindDirection")
                        .HasColumnType("int");

                    b.Property<double>("WindSpeed")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("WeatherForecastId");

                    b.ToTable("WeatherForecastDailyState");
                });

            modelBuilder.Entity("CMLSmartHomeCommon.Model.WeatherForecast+DailyTemp", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("DailyStateFeelsLikeTemperatureId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DailyStateTemperatureId")
                        .HasColumnType("bigint");

                    b.Property<double>("DayTemperature")
                        .HasColumnType("double");

                    b.Property<double>("EveningTemperature")
                        .HasColumnType("double");

                    b.Property<double>("MaxDailyTemperature")
                        .HasColumnType("double");

                    b.Property<double>("MinDailyTemperature")
                        .HasColumnType("double");

                    b.Property<double>("MorningTemperature")
                        .HasColumnType("double");

                    b.Property<double>("NightTemperature")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("DailyStateFeelsLikeTemperatureId")
                        .IsUnique();

                    b.HasIndex("DailyStateTemperatureId")
                        .IsUnique();

                    b.ToTable("WeatherForecastDailyTemperature");
                });

            modelBuilder.Entity("CMLSmartHomeCommon.Model.WeatherForecast+HourlyState", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<double>("AtmosphericTemperature")
                        .HasColumnType("double");

                    b.Property<int>("Cloudiness")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("FeelsLikeTemperature")
                        .HasColumnType("double");

                    b.Property<int>("Humidity")
                        .HasColumnType("int");

                    b.Property<int>("Pressure")
                        .HasColumnType("int");

                    b.Property<double?>("Rain")
                        .HasColumnType("double");

                    b.Property<double?>("Snow")
                        .HasColumnType("double");

                    b.Property<double>("Temperature")
                        .HasColumnType("double");

                    b.Property<long>("WeatherForecastId")
                        .HasColumnType("bigint");

                    b.Property<int>("WindDirection")
                        .HasColumnType("int");

                    b.Property<double>("WindSpeed")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("WeatherForecastId");

                    b.ToTable("WeatherForecastHourlyState");
                });

            modelBuilder.Entity("CMLSmartHomeCommon.Model.WeatherForecast+Weather", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("CurrentStateId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DailyStateId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("HourlyStateId")
                        .HasColumnType("bigint");

                    b.Property<string>("Icon")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Main")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("WeatherConditionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrentStateId");

                    b.HasIndex("DailyStateId");

                    b.HasIndex("HourlyStateId");

                    b.ToTable("WeatherForecastWeather");
                });

            modelBuilder.Entity("CMLSmartHomeController.Model.SensorRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("CollectorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("SensorId")
                        .HasColumnType("bigint");

                    b.Property<int>("Unit")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("SensorId", "DateTime");

                    b.ToTable("SensorRecords");
                });

            modelBuilder.Entity("CMLSmartHomeController.Model.SmartHomeController", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("MACAddress")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Controller");
                });

            modelBuilder.Entity("CMLSmartHomeCommon.Model.Collector", b =>
                {
                    b.HasOne("CMLSmartHomeController.Model.SmartHomeController", null)
                        .WithMany("Collectors")
                        .HasForeignKey("SmartHomeControllerId");
                });

            modelBuilder.Entity("CMLSmartHomeCommon.Model.Dashboard", b =>
                {
                    b.HasOne("CMLSmartHomeCommon.Model.Collector", "OutdoorCollector")
                        .WithMany()
                        .HasForeignKey("OutdoorCollectorId");
                });

            modelBuilder.Entity("CMLSmartHomeCommon.Model.Sensor", b =>
                {
                    b.HasOne("CMLSmartHomeCommon.Model.Collector", null)
                        .WithMany("Sensors")
                        .HasForeignKey("CollectorId");
                });

            modelBuilder.Entity("CMLSmartHomeCommon.Model.WeatherForecast+CurrentState", b =>
                {
                    b.HasOne("CMLSmartHomeCommon.Model.WeatherForecast", "WeatherForecast")
                        .WithOne("Current")
                        .HasForeignKey("CMLSmartHomeCommon.Model.WeatherForecast+CurrentState", "WeatherForecastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CMLSmartHomeCommon.Model.WeatherForecast+DailyState", b =>
                {
                    b.HasOne("CMLSmartHomeCommon.Model.WeatherForecast", "WeatherForecast")
                        .WithMany("Daily")
                        .HasForeignKey("WeatherForecastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CMLSmartHomeCommon.Model.WeatherForecast+DailyTemp", b =>
                {
                    b.HasOne("CMLSmartHomeCommon.Model.WeatherForecast+DailyState", "DailyStateFeelsLikeTemperature")
                        .WithOne("FeelsLikeTemperature")
                        .HasForeignKey("CMLSmartHomeCommon.Model.WeatherForecast+DailyTemp", "DailyStateFeelsLikeTemperatureId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CMLSmartHomeCommon.Model.WeatherForecast+DailyState", "DailyStateTemperature")
                        .WithOne("Temperature")
                        .HasForeignKey("CMLSmartHomeCommon.Model.WeatherForecast+DailyTemp", "DailyStateTemperatureId")
                        .HasConstraintName("FK_WeatherForecastDailyTemperature_WeatherForecastDailyState_D~1")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CMLSmartHomeCommon.Model.WeatherForecast+HourlyState", b =>
                {
                    b.HasOne("CMLSmartHomeCommon.Model.WeatherForecast", "WeatherForecast")
                        .WithMany("Hourly")
                        .HasForeignKey("WeatherForecastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CMLSmartHomeCommon.Model.WeatherForecast+Weather", b =>
                {
                    b.HasOne("CMLSmartHomeCommon.Model.WeatherForecast+CurrentState", null)
                        .WithMany("WeatherList")
                        .HasForeignKey("CurrentStateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CMLSmartHomeCommon.Model.WeatherForecast+DailyState", null)
                        .WithMany("WeatherList")
                        .HasForeignKey("DailyStateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CMLSmartHomeCommon.Model.WeatherForecast+HourlyState", null)
                        .WithMany("WeatherList")
                        .HasForeignKey("HourlyStateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
